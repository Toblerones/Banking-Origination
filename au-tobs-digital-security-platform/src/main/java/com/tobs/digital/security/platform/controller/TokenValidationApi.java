/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tobs.digital.security.platform.controller;

import com.tobs.digital.security.platform.domain.Token;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-11-28T15:23:11.212748+11:00[Australia/Sydney]")

@Validated
@Api(value = "token-validation", description = "the token-validation API")
public interface TokenValidationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /token-validation
     * get JWT token
     *
     * @param xRequestID  (required)
     * @param xSessionID  (required)
     * @param xChannelID  (required)
     * @param token data to be valided to get token (required)
     * @return true (status code 200)
     */
    @ApiOperation(value = "", nickname = "tokenValidationPost", notes = "get JWT token", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Auth Token", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "true") })
    @RequestMapping(value = "/token-validation",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> tokenValidationPost(@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Session-ID", required=true) String xSessionID,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Channel-ID", required=true) String xChannelID,@ApiParam(value = "data to be valided to get token" ,required=true )  @Valid @RequestBody Token token) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
