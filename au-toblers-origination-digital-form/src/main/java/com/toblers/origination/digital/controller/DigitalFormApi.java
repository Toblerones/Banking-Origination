/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.toblers.origination.digital.controller;

import com.toblers.origination.digital.domain.Application;
import com.toblers.origination.digital.domain.Error;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-11-28T15:39:41.468334+11:00[Australia/Sydney]")

@Validated
@Api(value = "digital-form", description = "the digital-form API")
public interface DigitalFormApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /digital-form/{appId} : get digital-form
     * Return all application
     *
     * @param xRequestID  (required)
     * @param xSessionID  (required)
     * @param xChannelID  (required)
     * @param appId Unique applicaiton Id (required)
     * @return A JSON array of applications (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (runtime) (status code 500)
     *         or Unknow downstream error (status code 503)
     */
    @ApiOperation(value = "get digital-form", nickname = "digitalFormAppIdGet", notes = "Return all application", response = Application.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "Digital Form", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON array of applications", response = Application.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error (runtime)", response = Error.class),
        @ApiResponse(code = 503, message = "Unknow downstream error", response = Error.class) })
    @RequestMapping(value = "/digital-form/{appId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Application> digitalFormAppIdGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Session-ID", required=true) String xSessionID,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Channel-ID", required=true) String xChannelID,@ApiParam(value = "Unique applicaiton Id",required=true) @PathVariable("appId") String appId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"product\" : { \"mainCurrency\" : \"mainCurrency\", \"subCurrencies\" : [ \"subCurrencies\", \"subCurrencies\" ], \"productCodes\" : [ \"productCodes\", \"productCodes\" ] }, \"applicationId\" : \"applicationId\", \"customer\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"address\" : \"address\", \"mobileNumber\" : \"mobileNumber\", \"dateOfBirth\" : \"dateOfBirth\", \"email\" : \"email\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /digital-form
     * create or update application
     *
     * @param xRequestID  (required)
     * @param xSessionID  (required)
     * @param xChannelID  (required)
     * @param application create application (required)
     * @return true (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (runtime) (status code 500)
     *         or Unknow downstream error (status code 503)
     */
    @ApiOperation(value = "", nickname = "digitalFormPost", notes = "create or update application", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "Digital Form", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "true"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error (runtime)", response = Error.class),
        @ApiResponse(code = 503, message = "Unknow downstream error", response = Error.class) })
    @RequestMapping(value = "/digital-form",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> digitalFormPost(@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Request-ID", required=true) String xRequestID,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Session-ID", required=true) String xSessionID,@ApiParam(value = "" ,required=true) @RequestHeader(value="X-Channel-ID", required=true) String xChannelID,@ApiParam(value = "create application" ,required=true )  @Valid @RequestBody Application application) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
